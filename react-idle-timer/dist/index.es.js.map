{"version":3,"file":"index.es.js","sources":["../src/utils.js","../src/IdleTimer.js","../src/useIdleTimer.js"],"sourcesContent":["/**\n * Determine if we are in a browser\n * or a server environment\n * @type {Boolean}\n * @private\n */\nexport const IS_BROWSER =\n  (typeof window === 'undefined' ? 'undefined' : typeof window) === 'object'\n\n/**\n * Default element to listen for events on\n * @type {Object}\n * @private\n */\nexport const DEFAULT_ELEMENT = IS_BROWSER ? document : {}\n\n/**\n * The default events to determine activity\n * @type {Array}\n * @private\n */\nexport const DEFAULT_EVENTS = [\n  'mousemove',\n  'keydown',\n  'wheel',\n  'DOMMouseScroll',\n  'mouseWheel',\n  'mousedown',\n  'touchstart',\n  'touchmove',\n  'MSPointerDown',\n  'MSPointerMove',\n  'visibilitychange'\n]\n\n/**\n * Creates a debounced function that delays invoking func until\n * after delay milliseconds has elapsed since the last time the\n * debounced function was invoked.\n * @name debounced\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function debounced (fn, delay) {\n  let timerId\n  return function (...args) {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n\n/**\n * Creates a throttled function that only invokes func at most\n * once per every wait milliseconds.\n * @name throttled\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function throttled (fn, delay) {\n  let lastCall = 0\n  return function (...args) {\n    const now = new Date().getTime()\n    if (now - lastCall < delay) {\n      return\n    }\n    lastCall = now\n    return fn(...args)\n  }\n}\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name IdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @class IdleTimer\n * @private\n */\nclass IdleTimer extends Component {\n  /**\n   * Creates an instance of IdleTimer\n   * bind all of our internal events here\n   * for best performance\n   * @param {Object} props\n   * @return {IdleTimer}\n   * @private\n   */\n  constructor (props) {\n    super(props)\n\n    /**\n     * Sets initial component state\n     * @type {Object}\n     * @private\n     */\n    this.state = {\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null,\n      pageX: null,\n      pageY: null\n    }\n\n    /**\n     * The timer instance\n     * @type {Timeout}\n     * @private\n     */\n    this.tId = null\n\n    /**\n     * Wether or not events are bound\n     * @type {boolean}\n     * @private\n     */\n    this.eventsBound = false\n\n    // Debounce and throttle can't both be set\n    if (props.debounce > 0 && props.throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create debounced action if applicable\n    if (props.debounce > 0) {\n      this._onAction = debounced(props.onAction, props.debounce)\n\n    // Create throttled action if applicable\n    } else if (props.throttle > 0) {\n      this._onAction = throttled(props.onAction, props.throttle)\n\n    // Set custom onAction\n    } else if (props.onAction) {\n      this._onAction = props.onAction\n\n    // Set default onAction\n    } else {\n      this._onAction = () => {}\n    }\n\n    // Create a throttle event handler if applicable\n    if (props.eventsThrottle > 0) {\n      this._handleEvent = throttled(this._handleEvent.bind(this), props.eventsThrottle)\n    } else {\n      this._handleEvent = this._handleEvent.bind(this)\n    }\n\n    // If startOnMount is set, idle state defaults to true\n    if (!props.startOnMount) {\n      this.state.idle = true\n    }\n\n    // Bind all events to component scope, built for speed ðŸš€\n    this._toggleIdleState = this._toggleIdleState.bind(this)\n    this.reset = this.reset.bind(this)\n    this.pause = this.pause.bind(this)\n    this.resume = this.resume.bind(this)\n    this.getRemainingTime = this.getRemainingTime.bind(this)\n    this.getElapsedTime = this.getElapsedTime.bind(this)\n    this.getLastActiveTime = this.getLastActiveTime.bind(this)\n    this.isIdle = this.isIdle.bind(this)\n  }\n\n  /**\n   * Runs once the component has mounted\n   * here we handle automatically starting\n   * the idletimer\n   * @private\n   */\n  componentDidMount () {\n    // Bind the event listeners\n    this._bindEvents()\n    // If startOnMount is enabled start the timer\n    const { startOnMount } = this.props\n    if (startOnMount) {\n      this.reset()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update debounce function\n    if (prevProps.debounce !== this.props.debounce) {\n      this._onAction = debounced(this._onAction, this.props.debounce)\n    }\n    // Update throttle function\n    if (prevProps.throttle !== this.props.throttle) {\n      this._onAction = throttled(this._onAction, this.props.throttle)\n    }\n    // Update event throttle function\n    if (prevProps.eventsThrottle !== this.props.eventsThrottle) {\n      this._handleEvent = throttled(this._handleEvent, this.props.eventsThrottle)\n    }\n  }\n\n  /**\n   * Called before the component unmounts\n   * here we clear the timer and remove\n   * all the event listeners\n   * @private\n   */\n  componentWillUnmount () {\n    // Clear timeout to prevent delayed state changes\n    clearTimeout(this.tId)\n    this._unbindEvents(true)\n  }\n\n  /**\n   * Render children if IdleTimer is used as a wrapper\n   * @return {Component} children\n   * @private\n   */\n  render () {\n    const { children } = this.props\n    return children || null\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  _bindEvents () {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    const { element, events, passive, capture } = this.props\n    if (!this.eventsBound) {\n      events.forEach(e => {\n        element.addEventListener(e, this._handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  _unbindEvents (force = false) {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    const { element, events, passive, capture } = this.props\n    if (this.eventsBound || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, this._handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = false\n    }\n  }\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  _toggleIdleState (e) {\n    // Fire the appropriate action\n    // and pass the event through\n    // Toggle the idle state\n    this.setState((prevState) => ({\n      idle: !prevState.idle\n    }), () => {\n      const { onActive, onIdle, stopOnIdle } = this.props\n      const { idle } = this.state\n      if (idle) {\n        if (stopOnIdle) {\n          // Clear any existing timeout\n          clearTimeout(this.tId)\n          this.tId = null\n          // Unbind events\n          this._unbindEvents()\n        }\n        onIdle(e)\n      } else {\n        if (!stopOnIdle) {\n          this._bindEvents()\n          onActive(e)\n        }\n      }\n    })\n  }\n\n  /**\n   * Event handler for supported event types\n   * @param  {Object} e event object\n   * @private\n   */\n  _handleEvent (e) {\n    const { remaining, pageX, pageY, idle } = this.state\n    const { timeout, stopOnIdle } = this.props\n\n    // Fire onAction event\n    this._onAction(e)\n\n    // Already active, ignore events\n    if (remaining) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = this.getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - this.getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if ((idle && !stopOnIdle) || (!idle && elapsedTimeSinceLastActive > timeout)) {\n      this._toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    this.setState({\n      lastActive: +new Date(),\n      pageX: e.pageX,\n      pageY: e.pageY\n    })\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle) {\n      if (!stopOnIdle) {\n        this.tId = setTimeout(this._toggleIdleState, timeout)\n      }\n    } else {\n      this.tId = setTimeout(this._toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Restore initial state and restart timer\n   * @name reset\n   */\n  reset () {\n    // Clear timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  pause () {\n    // Timer is already paused\n    const { remaining } = this.state\n    if (remaining !== null) return\n\n    // Unbind events\n    this._unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Define how much is left on the timer\n    this.setState({\n      remaining: this.getRemainingTime()\n    })\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  resume () {\n    // Timer is not paused\n    const { remaining, idle } = this.state\n    if (remaining === null) return\n\n    // Bind events\n    this._bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle) {\n      // Set a new timeout\n      this.tId = setTimeout(this._toggleIdleState, remaining)\n      // Set new state\n      this.setState({ remaining: null, lastActive: +new Date() })\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {Number} Milliseconds remaining\n   */\n  getRemainingTime () {\n    const { remaining, lastActive } = this.state\n    const { timeout } = this.props\n\n    // If idle there is no time remaining\n    if (remaining !== null) {\n      return remaining < 0 ? 0 : remaining\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  getElapsedTime () {\n    const { oldDate } = this.state\n    return (+new Date()) - oldDate\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  getLastActiveTime () {\n    const { lastActive } = this.state\n    return lastActive\n  }\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {Boolean}\n   */\n  isIdle () {\n    const { idle } = this.state\n    return idle\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {Number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {Number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  stopOnIdle: false,\n  capture: true,\n  passive: true\n}\n\nexport default IdleTimer\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name useIdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @function useIdleTimer\n * @private\n */\nfunction useIdleTimer ({\n  timeout = 1000 * 60 * 20,\n  element = DEFAULT_ELEMENT,\n  events = DEFAULT_EVENTS,\n  onIdle = () => {},\n  onActive = () => {},\n  onAction = () => {},\n  debounce = 0,\n  throttle = 0,\n  eventsThrottle = 200,\n  startOnMount = true,\n  stopOnIdle = false,\n  capture = true,\n  passive = true\n} = {}) {\n  const eventsBound = useRef(false)\n  const idle = useRef(true)\n  const oldDate = useRef(+new Date())\n  const lastActive = useRef(+new Date())\n  const remaining = useRef(null)\n  const pageX = useRef(null)\n  const pageY = useRef(null)\n  const tId = useRef(null)\n\n  // Event emitters\n  const emitOnIdle = useRef(onIdle)\n  const emitOnActive = useRef(onActive)\n  const emitOnAction = useRef(onAction)\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  const _toggleIdleState = e => {\n    const nextIdle = !idle.current\n    idle.current = nextIdle\n    if (nextIdle) {\n      if (stopOnIdle) {\n        // Clear any existing timeout\n        clearTimeout(tId.current)\n        tId.current = null\n        // Unbind events\n        _unbindEvents()\n      }\n      emitOnIdle.current(e)\n    } else {\n      if (!stopOnIdle) {\n        _bindEvents()\n        emitOnActive.current(e)\n      }\n    }\n  }\n\n  /**\n   * Event handler\n   * @param {Event} e\n   */\n  let _handleEvent = e => {\n    // Fire onAction event\n    emitOnAction.current(e)\n\n    // Already active, ignore events\n    if (remaining.current) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if (\n      (idle.current && !stopOnIdle) ||\n      (!idle.current && elapsedTimeSinceLastActive > timeout)\n    ) {\n      _toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    lastActive.current = +new Date()\n    pageX.current = e.pageX\n    pageY.current = e.pageY\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle.current) {\n      if (!stopOnIdle) {\n        tId.current = setTimeout(_toggleIdleState, timeout)\n      }\n    } else {\n      tId.current = setTimeout(_toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  const _bindEvents = () => {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    if (!eventsBound.current) {\n      events.forEach(e => {\n        element.addEventListener(e, _handleEvent, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  const _unbindEvents = (force = false) => {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    if (eventsBound.current || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, _handleEvent, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = false\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {Number} Milliseconds remaining\n   */\n  const getRemainingTime = () => {\n    // If idle there is no time remaining\n    if (remaining.current !== null) {\n      return remaining.current < 0 ? 0 : remaining.current\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive.current)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  const getElapsedTime = () => {\n    return (+new Date()) - oldDate.current\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  const getLastActiveTime = () => lastActive.current\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {Boolean}\n   */\n  const isIdle = () => idle.current\n\n  /**\n * Restore initial state and restart timer\n * @name reset\n */\n  const reset = () => {\n    // Clear timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Reset state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    // Set new timeout\n    tId.current = setTimeout(_toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  const pause = () => {\n    // Timer is already paused\n    if (remaining.current !== null) return\n\n    // Unbind events\n    _unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Define how much is left on the timer\n    remaining.current = getRemainingTime()\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  const resume = () => {\n    // Timer is not paused\n    if (remaining.current === null) return\n\n    // Bind events\n    _bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle.current) {\n      // Set a new timeout\n      tId.current = setTimeout(_toggleIdleState, remaining.current)\n      // Set states\n      remaining.current = null\n      lastActive.current = +new Date()\n    }\n  }\n\n  /**\n   * Hook lifecycle\n   */\n  useEffect(() => {\n    // Debounce and throttle can't both be set\n    if (debounce > 0 && throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create a throttle event handler if applicable\n    if (eventsThrottle > 0) {\n      _handleEvent = throttled(_handleEvent, eventsThrottle)\n    }\n\n    // Bind the events\n    _bindEvents()\n\n    // If startOnMount is enabled, start the timer\n    if (startOnMount) reset()\n\n    // Clear and unbind on unmount\n    return () => {\n      clearTimeout(tId.current)\n      _unbindEvents(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    emitOnIdle.current = onIdle\n  }, [onIdle])\n\n  useEffect(() => {\n    emitOnActive.current = onActive\n  }, [onActive])\n\n  useEffect(() => {\n    // Create debounced action if applicable\n    if (debounce > 0) {\n      emitOnAction.current = debounced(onAction, debounce)\n\n    // Create throttled action if applicable\n    } else if (throttle > 0) {\n      emitOnAction.current = throttled(onAction, throttle)\n\n    // No throttle or debounce\n    } else {\n      emitOnAction.current = onAction\n    }\n  }, [onAction])\n\n  return {\n    isIdle,\n    pause,\n    reset,\n    resume,\n    getLastActiveTime,\n    getElapsedTime,\n    getRemainingTime\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nuseIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {Number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {Number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nuseIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  stopOnIdle: false,\n  capture: true,\n  passive: true\n}\n\nexport default useIdleTimer\n"],"names":["IS_BROWSER","window","DEFAULT_ELEMENT","document","DEFAULT_EVENTS","debounced","fn","delay","timerId","args","clearTimeout","setTimeout","throttled","lastCall","now","Date","getTime","IdleTimer","Component","[object Object]","props","super","this","state","idle","oldDate","lastActive","remaining","pageX","pageY","tId","eventsBound","debounce","throttle","Error","_onAction","onAction","eventsThrottle","_handleEvent","bind","startOnMount","_toggleIdleState","reset","pause","resume","getRemainingTime","getElapsedTime","getLastActiveTime","isIdle","_bindEvents","prevProps","_unbindEvents","children","element","events","passive","capture","forEach","e","addEventListener","force","removeEventListener","setState","prevState","onActive","onIdle","stopOnIdle","timeout","type","elapsedTimeSinceLastActive","timeLeft","useIdleTimer","useRef","emitOnIdle","emitOnActive","emitOnAction","nextIdle","current","useEffect","propTypes","PropTypes","number","arrayOf","string","func","oneOfType","object","bool","defaultProps"],"mappings":"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"}